from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    ContextTypes, MessageHandler, filters
)
from config import ALLOWED_PAIRS, TELEGRAM_TOKEN
from signals import check_signal
import asyncio
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
def get_pair_keyboard(prefix: str = "signal_") -> InlineKeyboardMarkup:
    buttons = []
    for i in range(0, len(ALLOWED_PAIRS), 2):
        row = [
            InlineKeyboardButton(ALLOWED_PAIRS[i], callback_data=f"{prefix}{ALLOWED_PAIRS[i]}"),
            InlineKeyboardButton(ALLOWED_PAIRS[i+1], callback_data=f"{prefix}{ALLOWED_PAIRS[i+1]}") if i+1 < len(ALLOWED_PAIRS) else None
        ]
        buttons.append([btn for btn in row if btn])
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª", callback_data="manual_signal")],
        [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã", callback_data="auto_signals")]
    ]
    await update.message.reply_text(
        "‚ö°Ô∏è –ë–æ—Ç –¥–ª—è —Å–∫–∞–ª—å–ø–∏–Ω–≥–∞ –±–∏–Ω–∞—Ä–Ω—ã—Ö –æ–ø—Ü–∏–æ–Ω–æ–≤\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–≤—Ç–æ—Å–∏–≥–Ω–∞–ª—ã"
async def auto_signals(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∞–≤—Ç–æ—Å–∏–≥–Ω–∞–ª–æ–≤:",
        reply_markup=get_pair_keyboard("auto_")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–∏–≥–Ω–∞–ª–∞
async def manual_signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=get_pair_keyboard()
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
async def send_signal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    pair = query.data.split("_")[1]
    
    await query.answer(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é {pair}...")
    signal = check_signal(pair)
    
    if signal:
        text = (
            f"üìä *{pair}*\n"
            f"üîπ –°–∏–≥–Ω–∞–ª: *{signal['signal']}*\n"
            f"üîπ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: *{signal['confidence']}%*\n"
            f"üîπ –≠–∫—Å–ø–∏—Ä–∞—Ü–∏—è: *2 –º–∏–Ω—É—Ç—ã*"
        )
    else:
        text = f"‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è *{pair}*."
    
    await query.edit_message_text(text, parse_mode="Markdown")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main() -> None:
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(auto_signals, pattern="^auto_signals$"))
    app.add_handler(CallbackQueryHandler(manual_signal, pattern="^manual_signal$"))
    app.add_handler(CallbackQueryHandler(send_signal, pattern="^(signal|auto)_"))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()