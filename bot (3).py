import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Updater, CommandHandler, MessageHandler, Filters, 
    CallbackContext, ConversationHandler
)
import json
import os
import random
from datetime import datetime
import matplotlib.pyplot as plt
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    SET_BALANCE, MAIN_MENU, TRADE_JOURNAL, NEW_TRADE_EMOTION, 
    NEW_TRADE_STRATEGY, TRADE_TYPE, CHECK_EXTREMUM, CHECK_ZONE, 
    CHECK_BREAKOUT, CHECK_CONFIRMATION, TRADE_CONFIRMATION, 
    TRADE_RESULT, TRADE_DIRECTION, CHECK_FIBONACCI
) = range(14)

# –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞
RISK_LEVELS = [
    (0, 150, 0.05),
    (150, 350, 0.04),
    (350, 1000, 0.03),
    (1000, 5000, 0.02),
    (5000, float('inf'), 0.01)
]

# –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—É–ª—É—á—à–µ–Ω–Ω—ã–µ)
WIN_MOTIVATION = [
    "üéØ –ë–ª–µ—Å—Ç—è—â–µ! –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞–ª ${profit:.2f}!",
    "üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–±—ã–ª—å! +${profit:.2f} –∫ –±–∞–ª–∞–Ω—Å—É!",
    "üèÜ –ò–¥–µ–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥! –¢–≤–æ–π –≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%",
    "üí∏ –ü—Ä–∏–±—ã–ª—å –∫–∞–∫ –ø–æ —É—á–µ–±–Ω–∏–∫—É! {motivation_quote}",
    "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–Ω–∞–π–ø–µ—Ä! –ë–∞–ª–∞–Ω—Å: ${balance:.2f}"
]

LOSS_MOTIVATION = [
    "üõ°Ô∏è –ù–µ —Å–¥–∞–≤–∞–π—Å—è! ${loss:.2f} - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—É–ø–µ–Ω—å–∫–∞ –∫ —É—Å–ø–µ—Ö—É",
    "üåßÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ—É–¥–∞—á–∞. –¢–≤–æ–π –≤–∏–Ω—Ä–µ–π—Ç: {win_rate:.1f}%",
    "üî• –¶–µ–Ω–Ω—ã–π —É—Ä–æ–∫! –ü–æ–º–Ω–∏: '{motivation_quote}'",
    "üöß –í—Å–µ–≥–æ –æ–¥–Ω–∞ —Å–¥–µ–ª–∫–∞ –∏–∑ –º–Ω–æ–≥–∏—Ö. –ë–∞–ª–∞–Ω—Å: ${balance:.2f}",
    "üå± –ö–∞–∂–¥–∞—è –ø–æ—Ç–µ—Ä—è ${loss:.2f} - —Å–µ–º—è –±—É–¥—É—â–µ–π –ø–æ–±–µ–¥—ã"
]

GENERAL_MOTIVATION = [
    "üí° –£—Å–ø–µ—à–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è ‚Äî —ç—Ç–æ 20% —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏ 80% –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è",
    "üß† –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ –≤–∞–∂–Ω–µ–µ, —á–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞",
    "‚öñÔ∏è –†–∏—Å–∫—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–º, —á—Ç–æ –≥–æ—Ç–æ–≤ –ø–æ—Ç–µ—Ä—è—Ç—å",
    "üìà –¢—Ä–µ–Ω–¥ ‚Äî —Ç–≤–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥",
    "üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π, –ø–ª–∞–Ω–∏—Ä—É–π, –∏—Å–ø–æ–ª–Ω—è–π"
]

# –í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã (—Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
VISUAL_EXAMPLES = {
    "swing_low": "https://fsr-develop.ru/wp-content/uploads/2023/09/image-1322-1024x722.png",
    "swing_high": "https://fsr-develop.ru/wp-content/uploads/2023/09/image-1322-1024x722.png",
    "liquidity_pool_long": "https://blog.opofinance.com/en/wp-content/uploads/2024/09/Mastering-ICT-Liquidity-Trading-4.jpg",
    "liquidity_pool_short": "https://blog.opofinance.com/en/wp-content/uploads/2024/09/Mastering-ICT-Liquidity-Trading-4.jpg",
    "breakout_long": "https://blog.opofinance.com/en/wp-content/uploads/2024/10/Breakout-Trading-Strategy-3.jpg",
    "breakout_short": "https://blog.opofinance.com/en/wp-content/uploads/2024/10/Breakout-Trading-Strategy-3.jpg",
    "fibonacci": "https://www.tradingsim.com/hubfs/Fibretracement-jpeg.png",
    "risk_management": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTE9zIipV9qsOcZdo8_vwmGmeqsziQn7jyonQ&s",
    "confirmation_long": "https://blog.opofinance.com/en/wp-content/uploads/2024/09/Mastering-ICT-Liquidity-Trading-4.jpg",
    "confirmation_short": "https://blog.opofinance.com/en/wp-content/uploads/2024/09/Mastering-ICT-Liquidity-Trading-4.jpg"
}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
def load_user_data(user_id: int) -> dict:
    filename = f"user_{user_id}.json"
    if os.path.exists(filename):
        with open(filename, 'r') as f:
            return json.load(f)
    return {"balance": None, "trades": []}

def save_user_data(user_id: int, data: dict):
    filename = f"user_{user_id}.json"
    with open(filename, 'w') as f:
        json.dump(data, f, indent=2)

def calculate_position_size(balance: float) -> float:
    for min_bal, max_bal, risk_percent in RISK_LEVELS:
        if min_bal <= balance < max_bal:
            return balance * risk_percent
    return balance * 0.01

def get_enhanced_motivation(user_data: dict, m_type: str) -> str:
    trades = user_data.get('trades', [])
    balance = user_data.get('balance', 0)
    win_rate = 0
    
    if trades:
        profit_count = sum(1 for t in trades if t.get('profit', 0) > 0)
        win_rate = (profit_count / len(trades)) * 100
        
        if m_type == "win" and trades:
            last_profit = trades[-1].get('profit', 0)
            msg = random.choice(WIN_MOTIVATION)
            return msg.format(
                profit=last_profit,
                win_rate=win_rate,
                balance=balance,
                motivation_quote=random.choice(GENERAL_MOTIVATION)
            )
        elif m_type == "loss" and trades:
            last_loss = abs(trades[-1].get('profit', 0))
            msg = random.choice(LOSS_MOTIVATION)
            return msg.format(
                loss=last_loss,
                win_rate=win_rate,
                balance=balance,
                motivation_quote=random.choice(GENERAL_MOTIVATION)
            )
    
    return random.choice(GENERAL_MOTIVATION)

def generate_balance_chart(user_data: dict):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞"""
    trades = user_data.get('trades', [])
    if len(trades) < 2:
        return None
        
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    balances = []
    dates = []
    for trade in trades:
        if 'balance_after' in trade and 'exit_time' in trade:
            balances.append(trade['balance_after'])
            dates.append(trade['exit_time'])
    
    if len(balances) < 2:
        return None
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    plt.figure(figsize=(10, 5))
    plt.plot(range(len(balances)), balances, marker='o', linestyle='-', color='#4CAF50', linewidth=2, markersize=6)
    plt.title('üìà –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞', fontsize=14, pad=20)
    plt.xlabel('–ù–æ–º–µ—Ä —Å–¥–µ–ª–∫–∏', fontsize=12)
    plt.ylabel('–ë–∞–ª–∞–Ω—Å ($)', fontsize=12)
    plt.grid(True, linestyle='--', alpha=0.7)
    plt.tight_layout()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
    buf = io.BytesIO()
    plt.savefig(buf, format='png', dpi=80)
    buf.seek(0)
    plt.close()
    return buf

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
def start(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    user_data = load_user_data(user.id)
    context.user_data['user_data'] = user_data
    
    if user_data.get('balance') is None:
        reply_keyboard = [['üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å']]
        update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
            "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥-–ø–æ–º–æ—â–Ω–∏–∫.\n\n"
            "üí∞ –î–ª—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ–π —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return SET_BALANCE
    
    return show_main_menu(update, context)

def set_balance(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üí∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å':
        update.message.reply_text(
            "–í–≤–µ–¥–∏ —Å—É–º–º—É —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ (–≤ USD):",
            reply_markup=ReplyKeyboardRemove()
        )
        return SET_BALANCE
    
    try:
        balance = float(update.message.text)
        if balance <= 0:
            raise ValueError
    except ValueError:
        update.message.reply_text(
            "‚ùå –ù—É–∂–Ω–æ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –Ω—É–ª—è. –í–≤–µ–¥–∏ —Å—É–º–º—É –¥–µ–ø–æ–∑–∏—Ç–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SET_BALANCE
    
    user_id = update.message.from_user.id
    user_data = context.user_data['user_data']
    user_data['balance'] = balance
    save_user_data(user_id, user_data)
    
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n\n"
        f"{get_enhanced_motivation(user_data, 'general')}",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return MAIN_MENU

def show_main_menu(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data['user_data']
    balance = user_data['balance']
    position_size = calculate_position_size(balance)
    
    reply_keyboard = [
        ['üéØ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞', 'üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫'],
        ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è']
    ]
    
    text = (
        f"üíº –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
    )
    return MAIN_MENU

def show_journal(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data['user_data']
    trades = user_data['trades']
    
    if not trades:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üì≠ –£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç —Å–¥–µ–ª–æ–∫\n\n"
            f"{get_enhanced_motivation(user_data, 'general')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞
    chart = generate_balance_chart(user_data)
    
    text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n"
    for i, trade in enumerate(trades[-5:], 1):
        result = "‚úÖ –ü—Ä–∏–±—ã–ª—å" if trade.get('profit', 0) > 0 else "‚ùå –£–±—ã—Ç–æ–∫"
        text += (
            f"{i}. {trade.get('symbol', 'N/A')} - {trade.get('trade_type', 'N/A')}\n"
            f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result} ${abs(trade.get('profit', 0)):.2f}\n"
            f"   –î–∞—Ç–∞: {trade.get('exit_time', 'N/A')}\n\n"
        )
    
    profit_count = sum(1 for t in trades if t.get('profit', 0) > 0)
    loss_count = len(trades) - profit_count
    win_rate = (profit_count / len(trades)) * 100 if trades else 0
    
    text += (
        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"   –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(trades)}\n"
        f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profit_count} | –£–±—ã—Ç–æ—á–Ω—ã—Ö: {loss_count}\n"
        f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {win_rate:.1f}%\n\n"
    )
    
    if win_rate > 60:
        text += f"‚≠ê –û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!\n{get_enhanced_motivation(user_data, 'win')}"
    elif win_rate < 40:
        text += f"üí™ –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–±–æ—Ç–∞—Ç—å!\n{get_enhanced_motivation(user_data, 'loss')}"
    else:
        text += get_enhanced_motivation(user_data, 'general')
    
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    
    if chart:
        update.message.reply_photo(
            photo=chart, 
            caption=text,
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        update.message.reply_text(
            text,
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    return MAIN_MENU

def new_trade_start(update: Update, context: CallbackContext) -> int:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é
    now_utc = datetime.utcnow()
    hour = now_utc.hour
    session_info = ""
    
    if 0 <= hour < 6:  # –ê–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        session_info = "üåè –°–µ–π—á–∞—Å –∞–∑–∏–∞—Ç—Å–∫–∞—è —Å–µ—Å—Å–∏—è - –æ–±—ã—á–Ω–æ –Ω–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
    elif 6 <= hour < 12:  # –ï–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        session_info = "üåç –°–µ–π—á–∞—Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–∞—è —Å–µ—Å—Å–∏—è - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞—Ä–∞—Å—Ç–∞–µ—Ç"
    elif 12 <= hour < 18:  # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è
        session_info = "üåé –°–µ–π—á–∞—Å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è —Å–µ—Å—Å–∏—è - –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å!"
    else:  # –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è
        session_info = "üåô –í–µ—á–µ—Ä–Ω—è—è —Å–µ—Å—Å–∏—è - –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è"
    
    reply_keyboard = [
        ['üòä –°–ø–æ–∫–æ–µ–Ω', 'üòê –ù–µ–π—Ç—Ä–∞–ª–µ–Ω'], 
        ['üò∞ –í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω', 'üò° –≠–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω'],
        ['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
    ]
    
    update.message.reply_text(
        f"üß† –®–ê–ì 1 –∏–∑ 8: –¢–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n\n"
        f"{session_info}\n\n"
        "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–µ—Ä–µ–¥ —Å–¥–µ–ª–∫–æ–π?\n\n"
        "üìå –°–æ–≤–µ—Ç: –ï—Å–ª–∏ —Ç—ã –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω, –ª—É—á—à–µ –æ—Ç–ª–æ–∂–∏ —Ç–æ—Ä–≥–æ–≤–ª—é.",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return NEW_TRADE_EMOTION

def handle_emotion(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    emotion = update.message.text
    context.user_data['current_trade'] = {"emotion": emotion}
    
    reply_keyboard = [['‚úÖ –î–∞, –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ', '‚ùå –ù–µ—Ç, –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        "üìã –®–ê–ì 2 –∏–∑ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∞\n\n"
        "–ü—Ä–æ–≤–µ—Ä–∏–ª –ª–∏ —Ç—ã —ç—Ç–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã?\n\n"
        "1. üìä –û–ø—Ä–µ–¥–µ–ª–µ–Ω –ª–∏ —Ç—Ä–µ–Ω–¥ –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ?\n"
        "2. üíß –í–∏–¥–Ω–∞ –ª–∏ –±–ª–∏–∂–∞–π—à–∞—è –∑–æ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?\n" 
        "3. ‚ö†Ô∏è –ü–æ—Å—Ç–∞–≤–ª–µ–Ω –ª–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å?\n\n"
        "–í—Å–µ –ª–∏ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–¥–µ–ª–∫–∏?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return NEW_TRADE_STRATEGY

def handle_strategy(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return new_trade_start(update, context)
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    if '‚ùå –ù–µ—Ç' in update.message.text:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "‚õî –°—Ç–æ–∏—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è!\n\n"
            "–õ—É—á—à–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è:\n"
            "‚Ä¢ üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ ‚è≥ –î–æ–∂–¥–∞—Ç—å—Å—è —Å–∏–≥–Ω–∞–ª–æ–≤\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'loss')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    reply_keyboard = [['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        "üìå –í –∫–∞–∫–æ–π –ø–∞—Ä–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–µ–ª–∫—É?\n(–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT –∏–ª–∏ EURUSD)",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return TRADE_TYPE

def handle_symbol(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        return handle_emotion(update, context)
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    symbol = update.message.text.upper()
    context.user_data['current_trade']['symbol'] = symbol
    
    reply_keyboard = [['üìà –õ–æ–Ω–≥', 'üìâ –®–æ—Ä—Ç'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        "üìä –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–∏—Ä–∞–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return TRADE_DIRECTION

def handle_trade_type(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        reply_keyboard = [['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üìå –í –∫–∞–∫–æ–π –ø–∞—Ä–µ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–µ–ª–∫—É?\n(–ù–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT –∏–ª–∏ EURUSD)",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return TRADE_TYPE
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    trade_type = '–õ–æ–Ω–≥' if 'üìà' in update.message.text else '–®–æ—Ä—Ç'
    context.user_data['current_trade']['trade_type'] = trade_type
    
    if trade_type == '–õ–æ–Ω–≥':
        reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –º–∏–Ω–∏–º—É–º', '‚ùå –ù–µ –≤–∏–∂—É –º–∏–Ω–∏–º—É–º–∞'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üìç –®–ê–ì 3 –∏–∑ 8: –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞\n\n"
            "–í–∏–¥–∏—à—å —á–µ—Ç–∫–∏–π –º–∏–Ω–∏–º—É–º (–¥–Ω–æ), –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞?\n\n"
            "–ù–∞—à–µ–ª —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º', '‚ùå –ù–µ –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º–∞'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üìç –®–ê–ì 3 –∏–∑ 8: –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞\n\n"
            "–í–∏–¥–∏—à—å —á–µ—Ç–∫–∏–π –º–∞–∫—Å–∏–º—É–º (–≤–µ—Ä—à–∏–Ω—É), –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞?\n\n"
            "–ù–∞—à–µ–ª —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    return CHECK_EXTREMUM

def check_extremum(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        reply_keyboard = [['üìà –õ–æ–Ω–≥', 'üìâ –®–æ—Ä—Ç'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üìä –ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±–∏—Ä–∞–µ—à—å?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return TRADE_DIRECTION
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    if '‚ùå –ù–µ –≤–∏–∂—É' in update.message.text:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "‚ùå –°—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å!\n\n"
            "–õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è —á–µ—Ç–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è:\n"
            "‚Ä¢ ‚è≥ –ñ–¥–∞—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–µ–º—É–º–∞\n"
            "‚Ä¢ üìä –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç–∞—Ä—à–∏–π —Ç–∞–π–º—Ñ—Ä–µ–π–º\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'loss')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    trade_type = context.user_data['current_trade']['trade_type']
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –∑–æ–Ω–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    if trade_type == '–õ–æ–Ω–≥':
        reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –∑–æ–Ω—É', '‚ùå –ù–µ—Ç, –Ω–µ –≤–∏–∂—É'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üíß –®–ê–ì 4 –∏–∑ 8: –ó–æ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
            "–ò—â–µ—à—å –æ–±–ª–∞—Å—Ç—å –ù–ò–ñ–ï –º–∏–Ω–∏–º—É–º–∞, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã?\n\n"
            "–ù–∞—à–µ–ª –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    else:
        reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –∑–æ–Ω—É', '‚ùå –ù–µ—Ç, –Ω–µ –≤–∏–∂—É'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üíß –®–ê–ì 4 –∏–∑ 8: –ó–æ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
            "–ò—â–µ—à—å –æ–±–ª–∞—Å—Ç—å –í–´–®–ï –º–∞–∫—Å–∏–º—É–º–∞, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã?\n\n"
            "–ù–∞—à–µ–ª –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    return CHECK_ZONE

def check_zone(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        trade_type = context.user_data['current_trade']['trade_type']
        if trade_type == '–õ–æ–Ω–≥':
            reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –º–∏–Ω–∏–º—É–º', '‚ùå –ù–µ –≤–∏–∂—É –º–∏–Ω–∏–º—É–º–∞'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
            update.message.reply_text(
                "üìç –®–ê–ì 3 –∏–∑ 8: –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º—É–º–∞\n\n"
                "–í–∏–¥–∏—à—å —á–µ—Ç–∫–∏–π –º–∏–Ω–∏–º—É–º (–¥–Ω–æ), –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞?\n\n"
                "–ù–∞—à–µ–ª —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–æ–Ω–≥?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º', '‚ùå –ù–µ –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º–∞'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
            update.message.reply_text(
                "üìç –®–ê–ì 3 –∏–∑ 8: –ü–æ–∏—Å–∫ –º–∞–∫—Å–∏–º—É–º–∞\n\n"
                "–í–∏–¥–∏—à—å —á–µ—Ç–∫–∏–π –º–∞–∫—Å–∏–º—É–º (–≤–µ—Ä—à–∏–Ω—É), –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ —Ü–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞?\n\n"
                "–ù–∞—à–µ–ª —Ö–æ—Ä–æ—à–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —à–æ—Ä—Ç?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return CHECK_EXTREMUM
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    if '‚ùå –ù–µ—Ç' in update.message.text:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "‚ö†Ô∏è –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–æ–Ω—É!\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å:\n"
            "‚Ä¢ üîç –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫\n"
            "‚Ä¢ üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—à–µ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'loss')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –ø—Ä–æ–±–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    trade_type = context.user_data['current_trade']['trade_type']
    
    reply_keyboard = [['‚úÖ –î–∞, –±—ã–ª –ø—Ä–æ–±–æ–π', '‚ùå –ù–µ—Ç, –Ω–µ –±—ã–ª–æ'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        f"üí• –®–ê–ì 5 –∏–∑ 8: –ü—Ä–æ–±–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
        f"–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å?\n\n"
        "–ë—ã–ª –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–±–æ–π?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CHECK_BREAKOUT

def check_breakout(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        trade_type = context.user_data['current_trade']['trade_type']
        reply_keyboard = [['‚úÖ –î–∞, –≤–∏–∂—É –∑–æ–Ω—É', '‚ùå –ù–µ—Ç, –Ω–µ –≤–∏–∂—É'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        if trade_type == '–õ–æ–Ω–≥':
            update.message.reply_text(
                "üíß –®–ê–ì 4 –∏–∑ 8: –ó–æ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
                "–ù–∞—à–µ–ª –æ–±–ª–∞—Å—Ç—å –í–´–®–ï –º–∏–Ω–∏–º—É–º–∞, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã?\n\n"
                "–ù–∞—à–µ–ª –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        else:
            update.message.reply_text(
                "üíß –®–ê–ì 4 –∏–∑ 8: –ó–æ–Ω–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
                "–ù–∞—à–µ–ª –æ–±–ª–∞—Å—Ç—å –ù–ò–ñ–ï –º–∞–∫—Å–∏–º—É–º–∞, –≥–¥–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å—Ç–æ–ø-–ª–æ—Å—Å—ã?\n\n"
                "–ù–∞—à–µ–ª –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
        return CHECK_ZONE
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    if '‚ùå –ù–µ—Ç' in update.message.text:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "‚è≥ –ù—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø—Ä–æ–±–æ—è!\n\n"
            "–ß—Ç–æ –¥–µ–ª–∞—Ç—å:\n"
            "‚Ä¢ üëÄ –ù–∞–±–ª—é–¥–∞—Ç—å –∑–∞ –∑–æ–Ω–æ–π\n"
            "‚Ä¢ ‚õî –ù–µ –≤—Ö–æ–¥–∏—Ç—å –±–µ–∑ –ø—Ä–æ–±–æ—è\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'general')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    trade_type = context.user_data['current_trade']['trade_type']
    
    reply_keyboard = [['‚úÖ –î–∞, –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '‚ùå –ù–µ—Ç, –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        "üîÑ –®–ê–ì 6 –∏–∑ 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å–∫–æ–∫–∞\n\n"
        f"–¶–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ –ø–æ—à–ª–∞ –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏?\n\n"
        "–ï—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return CHECK_CONFIRMATION

def check_confirmation(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        trade_type = context.user_data['current_trade']['trade_type']
        reply_keyboard = [['‚úÖ –î–∞, –±—ã–ª –ø—Ä–æ–±–æ–π', '‚ùå –ù–µ—Ç, –Ω–µ –±—ã–ª–æ'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            f"üí• –®–ê–ì 5 –∏–∑ 8: –ü—Ä–æ–±–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏\n\n"
            f"–¶–µ–Ω–∞ –ø—Ä–æ–±–∏–ª–∞ –∑–æ–Ω—É –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É–ª–∞—Å—å?\n\n"
            "–ë—ã–ª –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–±–æ–π?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return CHECK_BREAKOUT
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    answer = update.message.text
    trade_type = context.user_data['current_trade']['trade_type']
    
    if '‚ùå –ù–µ—Ç' in answer:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "‚úã –û–ø–∞—Å–Ω–æ! –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:\n"
            "‚Ä¢ ‚è≥ –ñ–¥–∞—Ç—å —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞\n"
            "‚Ä¢ üîç –ò—Å–∫–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'loss')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    user_data = context.user_data['user_data']
    balance = user_data['balance']
    position_size = calculate_position_size(balance)
    
    context.user_data['current_trade']['size'] = position_size
    context.user_data['current_trade']['entry_time'] = datetime.now().strftime("%Y-%m-%d %H:%M")
    
    reply_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—Ö–æ–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        f"üéâ –®–ê–ì 7 –∏–∑ 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏!\n\n"
        f"üìä –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ {trade_type}!\n\n"
        f"üíµ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}\n"
        f"üìà –≠—Ç–æ {position_size/balance*100:.1f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –≤—Ö–æ–¥?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return TRADE_CONFIRMATION

def handle_trade_confirmation(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        trade_type = context.user_data['current_trade']['trade_type']
        reply_keyboard = [['‚úÖ –î–∞, –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ', '‚ùå –ù–µ—Ç, –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üîÑ –®–ê–ì 6 –∏–∑ 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç—Å–∫–æ–∫–∞\n\n"
            f"–¶–µ–Ω–∞ –æ—Ç—Å–∫–æ—á–∏–ª–∞ –æ—Ç —É—Ä–æ–≤–Ω—è –∏ –ø–æ—à–ª–∞ –≤ –Ω—É–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏?\n\n"
            "–ï—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return CHECK_CONFIRMATION
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    if "‚ùå" in update.message.text:
        reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        update.message.reply_text(
            "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
            f"{get_enhanced_motivation(context.user_data['user_data'], 'general')}",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return MAIN_MENU
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º
    current_trade = context.user_data['current_trade']
    current_trade['status'] = 'open'
    current_trade['balance_before'] = context.user_data['user_data']['balance']
    
    user_data = context.user_data['user_data']
    user_data['trades'].append(current_trade)
    save_user_data(update.message.from_user.id, user_data)
    
    reply_keyboard = [['‚úÖ –°–¥–µ–ª–∫–∞ –≤ –ø–ª—é—Å–µ', '‚ùå –°–¥–µ–ª–∫–∞ –≤ –º–∏–Ω—É—Å–µ'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        "üìå –°–¥–µ–ª–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞! –ñ–¥—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...\n\n"
        "–ö–∞–∫ –∑–∞–∫—Ä–æ–µ—à—å —Å–¥–µ–ª–∫—É, —Å–æ–æ–±—â–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return TRADE_RESULT

def handle_trade_result(update: Update, context: CallbackContext) -> int:
    if update.message.text == 'üîô –ù–∞–∑–∞–¥':
        reply_keyboard = [['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—Ö–æ–¥', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'], ['üîô –ù–∞–∑–∞–¥', 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
        trade_type = context.user_data['current_trade']['trade_type']
        user_data = context.user_data['user_data']
        balance = user_data['balance']
        position_size = calculate_position_size(balance)
        
        update.message.reply_text(
            f"üéâ –®–ê–ì 7 –∏–∑ 8: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏!\n\n"
            f"üìä –í—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ {trade_type}!\n\n"
            f"üíµ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}\n"
            f"üìà –≠—Ç–æ {position_size/balance*100:.1f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å –≤—Ö–æ–¥?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return TRADE_CONFIRMATION
    elif update.message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        return show_main_menu(update, context)
        
    user_id = update.message.from_user.id
    user_data = context.user_data['user_data']
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–∫—Ä—ã—Ç—É—é —Å–¥–µ–ª–∫—É
    open_trades = [t for t in user_data['trades'] if t.get('status') == 'open']
    if not open_trades:
        update.message.reply_text("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
        return show_main_menu(update, context)
    
    current_trade = open_trades[-1]
    position_size = current_trade['size']
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    is_profitable = "‚úÖ" in update.message.text
    profit = position_size * 0.8 if is_profitable else -position_size
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    new_balance = user_data['balance'] + profit
    user_data['balance'] = new_balance
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–¥–µ–ª–∫–µ
    current_trade.update({
        'status': 'closed',
        'profit': profit,
        'balance_after': new_balance,
        'exit_time': datetime.now().strftime("%Y-%m-%d %H:%M"),
        'result': 'profit' if is_profitable else 'loss'
    })
    
    save_user_data(user_id, user_data)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    result_text = (
        f"üìä –û—Ç—á–µ—Ç –æ —Å–¥–µ–ª–∫–µ:\n\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–∏–±—ã–ª—å' if is_profitable else '‚ùå –£–±—ã—Ç–æ–∫'}\n"
        f"–°—É–º–º–∞: ${abs(profit):.2f} {'+' if is_profitable else ''}\n"
        f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance:.2f}\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é
    if is_profitable:
        result_text += f"‚≠ê {get_enhanced_motivation(user_data, 'win')}\n\n"
    else:
        result_text += f"üí™ {get_enhanced_motivation(user_data, 'loss')}\n\n"
    
    # –†–∞—Å—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    new_position_size = calculate_position_size(new_balance)
    result_text += (
        f"üîç –î–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏:\n"
        f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${new_position_size:.2f}\n"
        f"–≠—Ç–æ {new_position_size/new_balance*100:.1f}% –æ—Ç –±–∞–ª–∞–Ω—Å–∞"
    )
    
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        result_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return MAIN_MENU

def show_motivation(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        f"üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ç–µ–±—è:\n\n{get_enhanced_motivation(context.user_data['user_data'], 'general')}",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return MAIN_MENU

def show_balance(update: Update, context: CallbackContext) -> int:
    user_data = context.user_data['user_data']
    balance = user_data['balance']
    position_size = calculate_position_size(balance)
    
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: ${balance:.2f}\n"
        f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${position_size:.2f}\n\n"
        f"üí° {get_enhanced_motivation(user_data, 'general')}",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return MAIN_MENU

def cancel(update: Update, context: CallbackContext) -> int:
    reply_keyboard = [['üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']]
    update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return show_main_menu(update, context)

def main() -> None:
    TOKEN = "7422938992:AAGJ_Z2wuuGE1OrzI23ln3kTD46vAUASIoI"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            SET_BALANCE: [MessageHandler(Filters.text & ~Filters.command, set_balance)],
            MAIN_MENU: [
                MessageHandler(Filters.regex('^üéØ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞$'), new_trade_start),
                MessageHandler(Filters.regex('^üìä –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫$'), show_journal),
                MessageHandler(Filters.regex('^üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å$'), show_balance),
                MessageHandler(Filters.regex('^üí° –ú–æ—Ç–∏–≤–∞—Ü–∏—è$'), show_motivation),
                MessageHandler(Filters.regex('^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$'), show_main_menu)
            ],
            NEW_TRADE_EMOTION: [
                MessageHandler(Filters.regex(r'^(üòä –°–ø–æ–∫–æ–µ–Ω|üòê –ù–µ–π—Ç—Ä–∞–ª–µ–Ω|üò∞ –í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω|üò° –≠–º–æ—Ü–∏–æ–Ω–∞–ª–µ–Ω|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_emotion)
            ],
            NEW_TRADE_STRATEGY: [
                MessageHandler(Filters.regex(r'^(‚úÖ –î–∞, –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ|‚ùå –ù–µ—Ç, –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_strategy)
            ],
            TRADE_TYPE: [
                MessageHandler(Filters.text & ~Filters.command, handle_symbol),
                MessageHandler(Filters.regex('^(üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_emotion)
            ],
            TRADE_DIRECTION: [
                MessageHandler(Filters.regex(r'^(üìà –õ–æ–Ω–≥|üìâ –®–æ—Ä—Ç|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_trade_type)
            ],
            CHECK_EXTREMUM: [
                MessageHandler(Filters.regex(r'^(‚úÖ –î–∞, –≤–∏–∂—É –º–∏–Ω–∏–º—É–º|‚úÖ –î–∞, –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º|‚ùå –ù–µ –≤–∏–∂—É –º–∏–Ω–∏–º—É–º–∞|‚ùå –ù–µ –≤–∏–∂—É –º–∞–∫—Å–∏–º—É–º–∞|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), check_extremum)
            ],
            CHECK_ZONE: [
                MessageHandler(Filters.regex(r'^(‚úÖ –î–∞, –≤–∏–∂—É –∑–æ–Ω—É|‚ùå –ù–µ—Ç, –Ω–µ –≤–∏–∂—É|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), check_zone)
            ],
            CHECK_BREAKOUT: [
                MessageHandler(Filters.regex(r'^(‚úÖ –î–∞, –±—ã–ª –ø—Ä–æ–±–æ–π|‚ùå –ù–µ—Ç, –Ω–µ –±—ã–ª–æ|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), check_breakout)
            ],
            CHECK_CONFIRMATION: [
                MessageHandler(Filters.regex(r'^(‚úÖ –î–∞, –µ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ|‚ùå –ù–µ—Ç, –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), check_confirmation)
            ],
            TRADE_CONFIRMATION: [
                MessageHandler(Filters.regex(r'^(‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –≤—Ö–æ–¥|‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_trade_confirmation)
            ],
            TRADE_RESULT: [
                MessageHandler(Filters.regex(r'^(‚úÖ –°–¥–µ–ª–∫–∞ –≤ –ø–ª—é—Å–µ|‚ùå –°–¥–µ–ª–∫–∞ –≤ –º–∏–Ω—É—Å–µ|üîô –ù–∞–∑–∞–¥|üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é)$'), handle_trade_result)
            ]
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        allow_reentry=True
    )

    dispatcher.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()